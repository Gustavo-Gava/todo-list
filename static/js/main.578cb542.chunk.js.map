{"version":3,"sources":["components/Task.tsx","components/Tasks.tsx","pages/TaskList.tsx","App.tsx","index.tsx"],"names":["Task","props","useContext","TasksContext","tasks","setTasks","className","style","task","completed","textDecoration","type","name","onClick","id","newTasks","map","console","log","Math","random","handleCheckedClick","title","filter","handleDeleteClick","Tasks","createContext","TaskList","useState","input","setInput","Provider","value","placeholder","onChange","e","target","aria-hidden","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAgBO,SAASA,EAAKC,GAAoB,IAAD,EACVC,qBAAWC,GAA/BC,EAD8B,EAC9BA,MAAOC,EADuB,EACvBA,SAoBf,OACE,sBAAKC,UAAU,iBAAf,UACE,uBACEA,UAAU,sBACVC,MACEN,EAAMO,KAAKC,UACP,CAAEC,eAAgB,gBAClB,CACEA,eAAgB,QAN1B,UAUE,uBACEC,KAAK,WACLC,KAAK,iBACLC,QAAS,kBA5BjB,SAA4BC,GAC1B,IAAMC,EAAWX,EAAMY,KAAI,SAACR,GAC1B,OAAIA,EAAKM,KAAOA,GACdN,EAAKC,WAAaD,EAAKC,UAChBD,GAEAA,KAGXS,QAAQC,IAAIC,KAAKC,UACjBf,EAASU,GAkBYM,CAAmBpB,EAAMO,KAAKM,OAE/C,+BAAOb,EAAMO,KAAKc,WAEpB,+BACE,mBACEhB,UAAU,cACVO,QAAS,kBAxCjB,SAA2BC,GACzB,IAAMC,EAAWX,EAAMmB,QAAO,SAACf,GAAD,OAAUA,EAAKM,KAAOA,KACpDT,EAASU,GAsCYS,CAAkBvB,EAAMO,KAAKM,YCjD/C,SAASW,EAAMxB,GACpB,OACE,mCACGA,EAAMG,MAAMY,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAAMA,KAAMA,S,UCOPL,EAAeuB,wBAAc,IAEnC,SAASC,IAAY,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,OAECF,mBAAS,CACjC,CACEN,MAAO,cACPb,WAAW,EACXK,GAAIK,KAAKC,UAEX,CACEE,MAAO,OACPb,WAAW,EACXK,GAAIK,KAAKC,YAXY,mBAElBhB,EAFkB,KAEXC,EAFW,KAoBzB,OACE,cAACF,EAAa4B,SAAd,CAAuBC,MAAO,CAAE5B,QAAOC,YAAvC,SACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,0CACA,sBAAKA,UAAU,qBAAf,UACE,uBACEK,KAAK,OACLsB,YAAY,oBACZC,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOJ,QACnCA,MAAOH,IAET,wBAAQhB,QAjBlB,WACER,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEkB,MAAOO,EAAOpB,WAAW,EAAOK,GAAIK,KAAKC,aAC/DU,EAAS,KAeD,SACE,mBAAGxB,UAAU,aAAa+B,cAAY,cAG1C,cAACZ,EAAD,CAAOrB,MAAOA,WCjDTkC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.578cb542.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\n\r\nimport { TasksContext } from \"../pages/TaskList\";\r\n\r\nimport \"../assets/styles/Task.css\";\r\n\r\ntype id = number;\r\n\r\ntype TasksProps = {\r\n  task: {\r\n    title: string;\r\n    completed: boolean;\r\n    id: number;\r\n  };\r\n};\r\n\r\nexport function Task(props: TasksProps) {\r\n  const { tasks, setTasks } = useContext(TasksContext);\r\n\r\n  function handleDeleteClick(id: id) {\r\n    const newTasks = tasks.filter((task) => task.id !== id);\r\n    setTasks(newTasks);\r\n  }\r\n\r\n  function handleCheckedClick(id: id) {\r\n    const newTasks = tasks.map((task) => {\r\n      if (task.id === id) {\r\n        task.completed = !task.completed;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    console.log(Math.random());\r\n    setTasks(newTasks);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-task\">\r\n      <span\r\n        className=\"container-task-name\"\r\n        style={\r\n          props.task.completed\r\n            ? { textDecoration: \"line-through\" }\r\n            : {\r\n                textDecoration: \"none\",\r\n              }\r\n        }\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"task-completed\"\r\n          onClick={() => handleCheckedClick(props.task.id)}\r\n        />\r\n        <span>{props.task.title}</span>\r\n      </span>\r\n      <span>\r\n        <i\r\n          className=\"fa fa-times\"\r\n          onClick={() => handleDeleteClick(props.task.id)}\r\n        ></i>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import { Task } from \"./Task\";\r\n\r\ntype TasksProps = {\r\n  tasks: {\r\n    title: string;\r\n    completed: boolean;\r\n    id: number;\r\n  }[];\r\n};\r\n\r\nexport function Tasks(props: TasksProps) {\r\n  return (\r\n    <>\r\n      {props.tasks.map((task) => (\r\n        <Task task={task} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, createContext } from \"react\";\r\nimport { Tasks } from \"../components/Tasks\";\r\nimport \"../assets/styles/TaskList.css\";\r\n\r\ntype TasksContextProps = {\r\n  tasks: {\r\n    title: string;\r\n    completed: boolean;\r\n    id: number;\r\n  }[];\r\n  setTasks: React.Dispatch<\r\n    React.SetStateAction<\r\n      {\r\n        title: string;\r\n        completed: boolean;\r\n        id: number;\r\n      }[]\r\n    >\r\n  >;\r\n};\r\n\r\nexport const TasksContext = createContext({} as TasksContextProps);\r\n\r\nexport function TaskList() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      title: \"Study React\",\r\n      completed: false,\r\n      id: Math.random(),\r\n    },\r\n    {\r\n      title: \"Read\",\r\n      completed: false,\r\n      id: Math.random(),\r\n    },\r\n  ]);\r\n\r\n  function handleTaskClick() {\r\n    setTasks([...tasks, { title: input, completed: false, id: Math.random() }]);\r\n    setInput(\"\");\r\n  }\r\n\r\n  return (\r\n    <TasksContext.Provider value={{ tasks, setTasks }}>\r\n      <div className=\"body\">\r\n        <div className=\"main-container\">\r\n          <h2>Todo App</h2>\r\n          <div className=\"container-add-task\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add your new todo\"\r\n              onChange={(e) => setInput(e.target.value)}\r\n              value={input}\r\n            />\r\n            <button onClick={handleTaskClick}>\r\n              <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </div>\r\n          <Tasks tasks={tasks} />\r\n        </div>\r\n      </div>\r\n    </TasksContext.Provider>\r\n  );\r\n}\r\n","import { TaskList } from \"./pages/TaskList\";\n\nfunction App() {\n  return (\n    <div>\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}